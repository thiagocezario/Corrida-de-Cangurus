import java.util.Random;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;


public class CorridaDeCangurus {
	static CyclicBarrier gate = null;
	
	static void threadMessage(String mensagem) {
		String nomeDaThread = Thread.currentThread().getName();
		System.out.format("%s: %s%n", nomeDaThread, mensagem);
	}


	public static class Canguru extends Thread {
		private int distanciaPulada = 0;
		private String nome = "";
		private static int colocacao = 1;
		public int distanciaTotal = distancia(80, 100);
		private int distanciaPercorrida = 0;
		private int turno = 0;
		public static int canguruDaVez = 0;

		public Canguru(String nomeCanguru, int vez) {
			nome = nomeCanguru;
			turno = vez;
		}

		public void run() {
			gate.await();
			while (distanciaPulada < distanciaTotal) {
				// Pause for 4 seconds
				while(canguruDaVez%5 != this.turno) {
					try{
						threadMessage("Esperando " + this.turno);
						
					} catch (Exception ex) {
						ex.getStackTrace();
					}
				}
				
				distanciaPulada = this.distancia(0, 10);
				distanciaPercorrida += distanciaPulada;
				// Print a message
				if (distanciaPulada < distanciaTotal) {
					threadMessage(nome + " pulou " + distanciaPulada + " metros e ja percorreu " + distanciaPercorrida);
				} else {
					String nomeColocacao;
					if (colocacao == 1) {
						nomeColocacao = "primeiro";
					} else if (colocacao == 2) {
						nomeColocacao = "segundo";
					} else if (colocacao == 3) {
						nomeColocacao = "terceiro";
					} else if (colocacao == 4) {
						nomeColocacao = "quarto";
					} else {
						nomeColocacao = "quinto";
					}
					threadMessage(nome + " cruzou a linha de chegada e ficou em " + nomeColocacao);
					// Increment the static variable. This variable is shared across all instances of horse.
					colocacao++;
				}

				canguruDaVez++;
				yield();
			}
		}

		private int distancia(int minimo, int maximo) {
			Random rand = new Random();
			return rand.nextInt(maximo - minimo) + minimo;
		}

		public static void main(String[] args) throws InterruptedException {
			long tempoDeInicio = System.currentTimeMillis();
			
			Canguru[] cangurus = new Canguru[]{
					new Canguru("Canguru 1", 1),
					new Canguru("Canguru 2", 2),
					new Canguru("Canguru 3", 3),
					new Canguru("Canguru 4", 4),
					new Canguru("Canguru 5", 5)
			};

			Thread[] threads = new Thread[cangurus.length];		

			gate = new CyclicBarrier(cangurus.length + 1);
			
			
			for(int i = 0; i < cangurus.length; i++) {
				threads[i] = new Thread(cangurus[i]);
				threads[i].start();
			}
			
			for(int i = 0; i < cangurus.length; i++) {
				while(threads[i].isAlive()) {
					threadMessage("Esperando " + threads[i]);
					threads[i].join();
					
					if (((System.currentTimeMillis() - tempoDeInicio) > 5000)
							&& threads[i].isAlive()) {
						threadMessage("Tired of waiting!");
						threads[i].interrupt();
						// Shouldn't be long now
						// -- wait indefinitely
						threads[i].join();
					}
				}
			}
		}
	}
}