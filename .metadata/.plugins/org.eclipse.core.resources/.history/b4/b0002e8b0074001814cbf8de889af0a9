import java.util.Random;
import java.util.concurrent.BrokenBarrierException;


public class CorridaDeCangurus {
	static void threadMessage(String message) {
        String threadName =
                Thread.currentThread().getName();
        System.out.format("%s: %s%n",
                threadName,
                message);
    }


	public class Canguru extends Thread {
		private int distanciaPulada = 0;
		private String nome = "";
		private static int colocacao = 1;


		public Canguru(String nomeCanguru) {
			nome = nomeCanguru;
		}

		public void run() {
			try {
				gate.await();
				while (distanciaPulada < distanciaTotal) {
					// Pause for 4 seconds
					Thread.sleep(4000);
					distanciaPulada += this.pulo();
					// Print a message
					if (distanciaPulada < distanciaTotal) {
						threadMessage(nome + " pulou " + distanciaPulada + " metros");
					} else {
						String nomeColocacao;
						if (colocacao == 1) {
							nomeColocacao = "primeiro";
						} else if (colocacao == 2) {
							nomeColocacao = "segundo";
						} else if (colocacao == 3) {
							nomeColocacao = "terceiro";
						} else if (colocacao == 4) {
							nomeColocacao = "quarto";
						} else {
							nomeColocacao = "quinto";
						}
						threadMessage(name + " cruzou a linha de chegada e ficou em " + nomeColocacao);
						// Increment the static variable. This variable is shared across all instances of horse.
						colocacao++;
					}
				}
			} catch (InterruptedException e) {
				threadMessage("I wasn't done!");
			} catch (BrokenBarrierException e) {
				e.printStackTrace();
			}
		}

		private int pulo() {
			Random rand = new Random();
			int upperBound = 10;
			int lowerBound = 0;
			return rand.nextInt(upperBound - lowerBound) + lowerBound;
		}

		public static void main(String[] args) throws InterruptedException, BrokenBarrierException {
			Canguru[] cangurus = new Canguru[]{
					new Canguru("Canguru 1"),
					new Canguru("Canguru 2"),
					new Canguru("Canguru 3"),
					new Canguru("Canguru 4"),
					new Canguru("Canguru 5"),
			};

			Thread[] threads = new Thread[cangurus.length];		


			for(int i = 0; i < cangurus.length; i++) {
				threads[i] = new Thread(cangurus[i]);
				threads[i].start();
			}
		}
	}
}